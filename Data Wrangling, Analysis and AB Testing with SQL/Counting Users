------------------------------------------------------------------------------------------------------------
                                            Practice Exercise - Counting Users
------------------------------------------------------------------------------------------------------------

Exercise 1: 

--Goal: “How many new users are added each day?"

SELECT created_at AS day,
       COUNT(*) AS users
FROM dsv1069.users
GROUP BY created_at

Exercise 2:
--Goal: WIthout worrying about deleted user or merged users, count the number of users added each day.

SELECT date(created_at) AS day,
       COUNT(*) AS users
FROM dsv1069.users
GROUP BY date(created_at)

Exercise 3: Consider the following query. Is this the right way to count merged or deleted
users? If all of our users were deleted tomorrow what would the result look like?

Starter Code:
SELECT date(created_at) AS day,
       COUNT(*) AS users
FROM dsv1069.users
WHERE deleted_at IS NULL
  AND (id <> parent_user_id
       OR parent_user_id IS NULL)
GROUP BY date(created_at)

Answer: Works!

Deleted users:

SELECT date(deleted_at) AS day,
       COUNT(*) AS deleted_users
FROM dsv1069.users
WHERE deleted_at IS NOT NULL
GROUP BY date(deleted_at)

Exercise 4: Count the number of users deleted each day. Then count the number of users
removed due to merging in a similar way.

SELECT date(merged_at) AS day,
       COUNT(*) AS merged_users
FROM dsv1069.users
WHERE id <> parent_user_id
  AND parent_user_id IS NOT NULL
GROUP BY date(merged_at)

Exercise 5: Use the pieces you’ve built as subtables and create a table that has a column for
the date, the number of users created, the number of users deleted and the number of users
merged that day.

SELECT new.day,
       new_users_added,
       deleted_users,
       merged_users
FROM
    (SELECT date(created_at) AS day,
            COUNT(*) AS new_users_added
   FROM dsv1069.users
   WHERE deleted_at IS NULL
     AND (id <> parent_user_id
          OR parent_user_id IS NULL)
   GROUP BY date(created_at)) new
LEFT JOIN
  (SELECT date(deleted_at) AS day,
          COUNT(*) AS deleted_users
   FROM dsv1069.users
   WHERE deleted_at IS NOT NULL
   GROUP BY date(deleted_at)) deleted
  ON deleted.day = new.day
LEFT JOIN
  (SELECT date(merged_at) AS day,
          COUNT(*) AS merged_users
   FROM dsv1069.users
   WHERE id <> parent_user_id
     AND parent_user_id IS NOT NULL
   GROUP BY date(merged_at)) merged
  ON merged.day = new.day

Exercise 6: Refine your query from #5 to have informative column names and so that null
columns return 0.

SELECT new.day,
       new_users_added,
       COALESCE(deleted_users, 0) AS deleted_users,
       COALESCE(merged_users, 0) AS merged_users
FROM
    (SELECT date(created_at) AS day,
            COUNT(*) AS new_users_added
   FROM dsv1069.users
   WHERE deleted_at IS NULL
     AND (id <> parent_user_id
          OR parent_user_id IS NULL)
   GROUP BY date(created_at)) new
LEFT JOIN
  (SELECT date(deleted_at) AS day,
          COUNT(*) AS deleted_users
   FROM dsv1069.users
   WHERE deleted_at IS NOT NULL
   GROUP BY date(deleted_at)) deleted
  ON deleted.day = new.day
LEFT JOIN
  (SELECT date(merged_at) AS day,
          COUNT(*) AS merged_users
   FROM dsv1069.users
   WHERE id <> parent_user_id
     AND parent_user_id IS NOT NULL
   GROUP BY date(merged_at)) merged
  ON merged.day = new.day

Exercise 7:
What if there were days where no users were created, but some users were deleted or merged.
Does the previous query still work? No, it doesn’t. Use the dates_rollup as a backbone for this
query, so that we won’t miss any dates.

Starter Code:
SELECT * FROM dsv1069.dates_rollup